IBM-Ready-App-for-Healthcare/android/android-uitests/build.xml

<?xml version="1.0" encoding="UTF-8"?>
<project name="Ready_App_iOS_Tests" default="runtests">
    <taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="libs/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	
	<property name='src' value='src' />
	<property name='bin' value='bin' />
	<property name='libs' value='libs' />
	<property name='dist' value='dist' />
	<property name='jarname' value='upload.jar' />
	<property name="XML_REPORTS_DIR" value="junitXml" />
	<var name="GEN_HTML_REPORTS" value="true" />
	<property name="HTML_REPORTS_DIR" value="html" />
	<var name="DEFAULT_APP_NAME" value="com.ibm.mil.readyapps.physio" />
	<var name="DEFAULT_APP_VERSION" value="1.0" />
	<var name="DEFAULT_PORT" value="4444" />
	<property name="ANDROID_SERVER_JAR" value="selendroid-standalone-0.12.0-with-dependencies.jar" />
	<property name="SERVER_WAIT_TIME" value="10" />
	<property name="SHOULD_START_SERVER" value="false" />
    <var name="EMULATOR_NAME" value="andriod21" />
	
	<path id='build.classpath'>
		<fileset dir="${libs}">
			<include name='**/*.jar' />
		</fileset>
	</path>
	<path id='test.classpath'>
	    <path refid='build.classpath' />
	    <pathelement location='${dist}/${jarname}' />
	</path>
	<property name='buildClasspath' refid='build.classpath' />
	<property name='testClasspath' refid='test.classpath' />
	
	<target name='validate' depends='clean'>
	    <fail message="Need to specify the fully qualified path to the Android SDK directory (ANDROID_HOME) in android.automated.testing.properties" unless="ANDROID_HOME" />
	    <fail message="Need to specify the fully qualified path to the apk file to test (APPLICATION_PATH) in android.automated.testing.properties" unless="APPLICATION_PATH" />
	    <fail message="Need to specify the fully qualified path to the apk file to test (APPLICATION_PATH) in android.automated.testing.properties" unless="APPLICATION_PATH" />
	    
		<if>
			<not>
				<isset property="APP_NAME" />
			</not>
			<then>
				<var name="APP_NAME" value="${DEFAULT_APP_NAME}" />
		</then>
	    </if>
		<if>
			<not>
				<isset property="APP_VERSION" />
			</not>
			<then>
				<var name="APP_VERSION" value="${DEFAULT_APP_VERSION}" />
			</then>
		</if>
		<if>
			<not>
				<isset property="PORT" />
			</not>
			<then>
				<var name="PORT" value="${DEFAULT_PORT}" />
			</then>
		</if>
	    
		<!--  not really sure what the file should be copied to -->
	    <copy file='android.automated.testing.properties.tmpl' tofile='android.automated.testing.properties' overwrite='true' verbose='true'>
	         <filterset>
	             <filter token="APPLICATION_PATH" value="${APPLICATION_PATH}" />
	             <filter token="APP_NAME" value="${APP_NAME}" />
	             <filter token="APP_VERSION" value="${APP_VERSION}" />
	             <filter token="PORT" value="${PORT}" />
	             <filter token="SHOULD_START_SERVER" value="${SHOULD_START_SERVER}" />
	         </filterset>
	     </copy>
	</target>
	
	<!--  deletes and makes the bin and dist directories -->
	<target name='clean' >
		<delete dir='${bin}' />
		<delete dir='${dist}' />
		<delete dir="${XML_REPORTS_DIR}" />
		<delete dir="${HTML_REPORTS_DIR}" />
		<mkdir dir='${bin}' />
		<mkdir dir='${dist}' />
		<mkdir dir="${XML_REPORTS_DIR}" />
		<mkdir dir="${HTML_REPORTS_DIR}" />
	</target>
	
	<!--  build the file -->
	<target name="build" depends="validate" >
		<javac srcdir='${src}' destdir='${bin}' source='1.7' target='1.7' debug='true' debuglevel='lines,vars,source'>
			<classpath>
			    <path refid='build.classpath' />
			</classpath>
		</javac>
	</target>
	
	<!--  create distribution directory -->
	<target name='dist' depends='build'>
	    <jar destfile='${dist}/${jarname}' basedir='${bin}' />
	</target>
	
	<target name="startserver" >
	    <echo message="Starting selendroid server with command: " />
	    <!-- 
	    This starts the selendroid server in a different thread.  We have to kill it manually later as its a blocking
	    proces.. This kill happens in the runtests target, after the tests are run, the first thing we do before
	    even checking if the tests failed is kill the selendroid server.
	    -->
		<echo message="    java -jar libs/${ANDROID_SERVER_JAR} -aut ${APPLICATION_PATH} -port ${PORT}" />
		<java jar="libs/${ANDROID_SERVER_JAR}" fork="true" spawn="true" >
			<env key="ANDROID_HOME" path="${ANDROID_HOME}" />
			<sysproperty key="ANDROID_HOME" path="${ANDROID_HOME}" />
			
		    <arg value="-aut" />
		    <arg value="${APPLICATION_PATH}" />
		    <arg value="-port" />
		    <arg value="${PORT}" />
		</java>

		<!-- Lets sleep for a bit to give the server time to start up. -->
		<echo message="Sleeping for ${SERVER_WAIT_TIME} seconds to give the server time to start." />
		<sleep seconds="${SERVER_WAIT_TIME}" />
	</target>
	
	<target name='setupemulator'>
	    <echo message="Restarting adb server " />
	    <exec executable="${ANDROID_HOME}/platform-tools/adb" dir="${ANDROID_HOME}/platform-tools" 
	        	failonerror="false">
	        <arg value="kill-server" />
	    </exec>
	  	<exec executable="${ANDROID_HOME}/platform-tools/adb" dir="${ANDROID_HOME}/platform-tools" 
	  	    	failonerror="false">
	        <arg value="start-server" />
	    </exec>
	    <!-- 
	    <exec executable="${ANDROID_HOME}/tools/android" dir="${ANDROID_HOME}/tools" outputproperty="emulators" 
	        	errorproperty="error">
	        <arg value="list" />
	        <arg value="avd" />
	    </exec>
	    <for list="${emulators}" param="emulator" delimiter="${line.separator}">
	        <sequential>
	            <var name="emuname" unset="true" />
	            <propertyregex property="emuname" input="@{emulator}" regexp="(.*)Name: (.*)" select="\2" />
	            <if>
	                <and>
						<isset property="emuname" />
						<not>
	                    	<equals arg1="${emuname}" arg2="" />
	                    </not>
	                </and>
	                
	                <then>
	                    <echo message="name: ${emuname}" />
	                    <exec executable="${ANDROID_HOME}/tools/android" dir="${ANDROID_HOME}/tools" 
	                        	outputproperty="output" errorproperty="error2" failonerror="false">
	                        <arg value="delete" />
	                        <arg value="avd" />
	                        <arg value="-n" />
	                        <arg value="${emuname}" />
	                    </exec>
	                    <echo message="output: ${output}" />
	                </then>
	            </if>
	        </sequential>
	    </for>
	     -->
	     <echo message="Deleting emulator : ${EMULATOR_NAME}" />
	     <exec executable="${ANDROID_HOME}/tools/android" dir="${ANDROID_HOME}/tools" 
				outputproperty="output" errorproperty="error2" failonerror="false">
			<arg value="delete" />
			<arg value="avd" />
			<arg value="-n" />
			<arg value="${EMULATOR_NAME}" />
		</exec>
	    <echo message="Creating emulator ${EMULATOR_NAME} needed for test" />
	    <exec executable="${ANDROID_HOME}/tools/android" dir="${ANDROID_HOME}/tools" >
	        <arg value="create" />
	        <arg value="avd" />
	        <arg value="--name" />
	        <arg value="${EMULATOR_NAME}" />
	        <arg value="--target" />
	        <arg value="Google Inc.:Google APIs:21" />
	        <arg value="--abi" />
	        <arg value="google_apis/x86" />
	        <arg value="--device" />
	        <arg value="Nexus 5" />
	        <arg value="--sdcard" />
	        <arg value="2048M" />
	        <arg value="--skin" />
	        <arg value="1080x1920" />
	    </exec>
	    <var name="EMU_INI" value="${user.home}/.android/avd/${EMULATOR_NAME}.avd/config.ini" />
	    <echo message="vm.heapSize=64${line.separator}" file="${EMU_INI}" append="true" encoding="UTF-8"/>
	    <echo message="hw.ramSize=2048${line.separator}" file="${EMU_INI}" append="true" encoding="UTF-8"/>
	    <echo message="hw.gpu.enabled=yes${line.separator}" file="${EMU_INI}" append="true" encoding="UTF-8"/>
	</target>
	
	<target name="renameClassesInXml" >
	    <!-- 
	    Lets loop over all the xml files in the ${XML_REPORTS_DIR} directory and change the classname attribute
	    of the testcase tag.  Right now, at least for this project, the class names overlap with the iOS tests so
	    we want to change the class names so their unique by type (iOS/Android) and by simulator/emulator that they
	    are run against.
	    -->
	     <for param="xmlFile">
			<path>
			    <fileset dir="${XML_REPORTS_DIR}" includes="*.xml" />
			</path>
	        <sequential>
	            <!-- Rename the original xml so we can create the new one with the original name -->
	            <var name="origfile" unset="true" />
	            <var name="origfile" value="@{xmlFile}.orig" />
	            <move file="@{xmlFile}" tofile="${origfile}" />
	            
	            <!-- Read in the contents into a property so we can loop over the contents line by line -->
	            <var name="contents" unset="true" />
	            <exec executable="sh" dir="." outputproperty="contents" errorproperty="error">
	                <arg value="-c" />
			        <arg value="cat ${origfile}" />
			    </exec>
			    
	            <!-- 
	            Grabbing the name of the class we are testing.  Right now the name of the xml is of the form
	            TEST-com.ibm.mil.<ClassName>-<Emulator>.xml.  We want to pull the class name and use it in the 
	            class name we will embed in the class attribute inside the xml file.
	             -->
			    <var name="filename" unset="true" />
			    <basename file="@{xmlFile}" property="filename" suffix=".xml" />
			    <var name="classname" unset="true" />
			    <propertyregex property="classname" input="${filename}" regexp="TEST-(.*)\.(.*)" select="\2" />
			    
			    <!-- Looping over the contents of the xml file. -->
			    <for list="${contents}" param="line" delimiter="${line.separator}">
			        <sequential>
			            <!-- Lets look to see if we found a line with the <testcase> tag on it. -->
			            <var name="tochange" unset="true" />
			            <propertyregex property="tochange" input="@{line}" regexp='(.*testcase classname=")(.*?)(" .*)'
			                	 replace="\1AndridUITest.${classname}\3"/>
			            <!-- Lets look to see if we found a line with the <testsuite> tag on it. -->
			            <var name="suitename" unset="true" />
			            <propertyregex property="suitename" input="@{line}" regexp='(.*testsuite.*name=")(.*?)(" .*)'
			                	 replace="\1AndridUITest.${classname}\3"/>

			            <!-- Now lets either replace the testcase or testsuite line, or just print the original line -->
			            <if>
			                <or>
			                    <and>
									<isset property="tochange" />
									<not>
				                    	<equals arg1="${tochange}" arg2="" />
				                    </not>
				                </and>
				                <and>
									<isset property="suitename" />
									<not>
				                    	<equals arg1="${suitename}" arg2="" />
				                    </not>
				                </and>
			                </or>
			                <then>
			                    <if>
					                <and>
										<isset property="suitename" />
										<not>
					                    	<equals arg1="${suitename}" arg2="" />
					                    </not>
					                </and>
					                <then>
					            		<!-- If we found a testsuite line, lets replace the name -->
					                    <echo message="${suitename}${line.separator}" file="@{xmlFile}" append="true"/>
					                </then>
					                <else>
					                    <!-- If we found a testcase line, lets replace the class name -->
			                    		<echo message="${tochange}${line.separator}" file="@{xmlFile}" append="true"/>
					                </else>
					            </if>
			                </then>
			                <else>
			                    <!-- Otherwise lets just print out the line as is so we don't lose anything. -->
			                    <echo message="@{line}${line.separator}" file="@{xmlFile}" append="true"/>
			                </else>
			            </if>
			        </sequential>
			    </for>
			    
			    <!-- Lets remove the backup file so we have only the orginal *.xml files again. -->
			    <delete file="${origfile}"/>
	        </sequential>
	    </for>    
	</target>
	
	<target name="genhtmlreports" >
	    <if>
		    <equals arg1="${GEN_HTML_REPORTS}" arg2="true" />
		    <then>
		        <junitreport todir="${HTML_REPORTS_DIR}" >
		            <fileset dir="${XML_REPORTS_DIR}" >
		                <include name="*.xml" />
		            </fileset>
		            <report format="frames" todir="${HTML_REPORTS_DIR}" />
		        </junitreport>
		    </then>
		</if>
	</target>
	
	<target name="killserver">
	    <!-- Kill the selendriod server we had started previously. -->
	    <exec executable="sh">
		    <arg value="-c" />
		    <arg value="ps -ef | grep ${ANDROID_SERVER_JAR} | grep -v grep | awk '{print $2}' | xargs kill -9" />
		</exec>
	</target>
	
	<target name='runtests' depends='dist,setupemulator,startserver'>
	    
	    <!-- Run all the tests, ignorning the classes that end in "Utilities". -->
		<junit printsummary='yes' haltonfailure='no' haltonerror='no' fork='on' showoutput='true' 
		    	failureproperty='failprop' errorproperty="errorprop">
			<classpath>
				<path refid='test.classpath' />
			</classpath>
			<env key="ANDROID_HOME" path="${ANDROID_HOME}" />
			<sysproperty key="ANDROID_HOME" path="${ANDROID_HOME}" />
			<formatter type='xml' extension="-Android-${EMULATOR_NAME}.xml" />
			
			<!--  Run all the tests, excluding anything that ends in the name Utilities -->
			<batchtest haltonfailure='false' haltonerror="false"  todir='${XML_REPORTS_DIR}'>
			    <fileset dir="${src}">
			        <include name="**/*.java" />
			        <exclude name="**/Menu*" />
			        <exclude name="**/Dashboard*" />
			        <exclude name="**/*Utilities.java" />
			    </fileset>
			</batchtest>
		</junit>
		
		<!-- Lets kill the server we started earlier -->
		<antcall target="killserver" inheritAll="true" />
		
		<!-- Lets convert our class names a bit so we don't clash with the iOS project -->
		<antcall target="renameClassesInXml" inheritAll="true" />
		
		<!-- Lets generate some html reports -->
		<antcall target="genhtmlreports" inheritAll="true" />
		
		<!-- Finally lets see if the tests failed, and fail accordingly. -->
		<if>
		    <and>
		        <or>
					<isset property='failprop' />
					<isset property='errorprop' />
				</or>
				<not>
				    <!-- This is so the ant wont fail and other tests can run in jenksin..the junit upload of xml 
				    reports will handle failing the build. -->
				    <isset property="DONT_FAIL" />
				</not>
		    </and>
			<then>
				<!--  Printing the contents of result.txt so i can have a history of stack traces of where it failed. 
				<loadfile property='resulttxt' srcFile='result.txt' />
				<echo message="${resulttxt}" /> -->
				<fail message="${failprop}" />
			</then>
		</if>
	</target>
</project>
	

